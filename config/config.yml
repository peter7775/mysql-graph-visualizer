mysql:
  host: localhost
  port: 3307
  user: root
  password: testpass
  database: testdata

neo4j:
  uri: "bolt://127.0.0.1:7687"
  user: "neo4j"
  password: "testpass"

transform_rules:
  # === CORE ENTITIES ===
  
  # Users - core entity with role-based coloring
  - name: "users_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT u.*, CONCAT(u.full_name, ' (', u.role, ')') as display_name FROM users u WHERE u.is_active = 1"
    target_type: "User"
    field_mappings:
      id: "id"
      username: "username"
      email: "email"
      full_name: "full_name"
      role: "role"
      display_name: "name"
      is_active: "is_active"

  # Teams
  - name: "teams_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT t.*, u.full_name as lead_name FROM teams t LEFT JOIN users u ON t.team_lead_id = u.id"
    target_type: "Team"
    field_mappings:
      id: "id"
      name: "name"
      description: "description"
      team_lead_id: "team_lead_id"
      lead_name: "lead_name"

  # Skills with categories
  - name: "skills_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT s.*, CONCAT(s.name, ' (', s.category, ')') as display_name FROM skills s"
    target_type: "Skill"
    field_mappings:
      id: "id"
      name: "display_name"
      category: "category"
      level_required: "level_required"

  # Projects with status and priority
  - name: "projects_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT p.*, u.full_name as creator_name, t.name as team_name FROM projects p LEFT JOIN users u ON p.created_by = u.id LEFT JOIN teams t ON p.team_id = t.id"
    target_type: "Project"
    field_mappings:
      id: "id"
      name: "name"
      description: "description"
      status: "status"
      priority: "priority"
      budget: "budget"
      creator_name: "creator_name"
      team_name: "team_name"

  # Tasks with hierarchical information
  - name: "tasks_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT t.*, p.name as project_name, u1.full_name as assigned_to_name, u2.full_name as created_by_name, pt.title as parent_title FROM tasks t LEFT JOIN projects p ON t.project_id = p.id LEFT JOIN users u1 ON t.assigned_to = u1.id LEFT JOIN users u2 ON t.created_by = u2.id LEFT JOIN tasks pt ON t.parent_task_id = pt.id"
    target_type: "Task"
    field_mappings:
      id: "id"
      title: "name"
      description: "description"
      status: "status"
      priority: "priority"
      estimated_hours: "estimated_hours"
      actual_hours: "actual_hours"
      project_name: "project_name"
      assigned_to_name: "assigned_to_name"
      created_by_name: "created_by_name"
      parent_title: "parent_title"

  # === COMPLEX SQL VIEWS FOR ANALYSIS ===

  # High-impact projects (custom view combining multiple criteria)
  - name: "high_impact_projects"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT CONCAT('IMPACT_', p.id) as id, p.name, p.status, p.priority, p.budget, COUNT(t.id) as task_count, AVG(ps.importance = 'critical') as critical_skills_ratio FROM projects p LEFT JOIN tasks t ON p.id = t.project_id LEFT JOIN project_skills ps ON p.id = ps.project_id WHERE p.budget > 150000 OR p.priority IN ('high', 'critical') GROUP BY p.id, p.name, p.status, p.priority, p.budget HAVING task_count > 2"
    target_type: "HighImpactProject"
    field_mappings:
      id: "id"
      name: "name"
      status: "status"
      priority: "priority"
      budget: "budget"
      task_count: "task_count"
      critical_skills_ratio: "critical_skills_ratio"

  # Skill experts (users with advanced/expert level in skills)
  - name: "skill_experts"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT CONCAT('EXPERT_', us.user_id, '_', us.skill_id) as id, u.full_name as expert_name, s.name as skill_name, us.proficiency, us.years_experience FROM user_skills us JOIN users u ON us.user_id = u.id JOIN skills s ON us.skill_id = s.id WHERE us.proficiency IN ('advanced', 'expert') AND us.years_experience >= 4"
    target_type: "SkillExpert"
    field_mappings:
      id: "id"
      expert_name: "expert_name"
      skill_name: "skill_name"
      proficiency: "proficiency"
      years_experience: "years_experience"
      name: "expert_name"

  # Project teams summary (aggregated view)
  - name: "project_teams_summary"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT CONCAT('TEAM_SUMMARY_', t.id) as id, t.name as team_name, COUNT(DISTINCT p.id) as project_count, COUNT(DISTINCT tm.user_id) as member_count, AVG(p.budget) as avg_project_budget FROM teams t LEFT JOIN projects p ON t.id = p.team_id LEFT JOIN team_members tm ON t.id = tm.team_id GROUP BY t.id, t.name HAVING project_count > 0"
    target_type: "TeamSummary"
    field_mappings:
      id: "id"
      team_name: "name"
      project_count: "project_count"
      member_count: "member_count"
      avg_project_budget: "avg_project_budget"

  # === RELATIONSHIPS - Original database relationships ===

  # Team leadership
  - name: "team_leadership"
    rule_type: "relationship"
    relationship_type: "LEADS"
    direction: "outgoing"
    source_node:
      type: "User"
      key: "id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_lead_id"
      target_field: "id"
    field_mappings:
      id: "id"

  # Team membership
  - name: "team_membership"
    rule_type: "relationship"
    relationship_type: "MEMBER_OF"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT tm.user_id, tm.team_id, tm.role, tm.joined_at FROM team_members tm"
    source_node:
      type: "User"
      key: "user_id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_id"
      target_field: "id"
    properties:
      role: "role"
      joined_at: "joined_at"

  # User skills with proficiency
  - name: "user_skill_proficiency"
    rule_type: "relationship"
    relationship_type: "HAS_SKILL"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT us.user_id, us.skill_id, us.proficiency, us.years_experience FROM user_skills us"
    source_node:
      type: "User"
      key: "user_id"
      target_field: "id"
    target_node:
      type: "Skill"
      key: "skill_id"
      target_field: "id"
    properties:
      proficiency: "proficiency"
      years_experience: "years_experience"

  # Project creation
  - name: "project_creation"
    rule_type: "relationship"
    relationship_type: "CREATED"
    direction: "outgoing"
    source_node:
      type: "User"
      key: "created_by"
      target_field: "id"
    target_node:
      type: "Project"
      key: "id"
      target_field: "id"
    field_mappings:
      id: "id"

  # Project team assignment
  - name: "project_team_assignment"
    rule_type: "relationship"
    relationship_type: "ASSIGNED_TO"
    direction: "outgoing"
    source_node:
      type: "Project"
      key: "id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_id"
      target_field: "id"
    field_mappings:
      id: "id"

  # Task assignment
  - name: "task_assignment"
    rule_type: "relationship"
    relationship_type: "ASSIGNED_TO"
    direction: "outgoing"
    source_node:
      type: "Task"
      key: "id"
      target_field: "id"
    target_node:
      type: "User"
      key: "assigned_to"
      target_field: "id"
    field_mappings:
      id: "id"

  # Task belongs to project
  - name: "task_project_relationship"
    rule_type: "relationship"
    relationship_type: "BELONGS_TO"
    direction: "outgoing"
    source_node:
      type: "Task"
      key: "id"
      target_field: "id"
    target_node:
      type: "Project"
      key: "project_id"
      target_field: "id"
    field_mappings:
      id: "id"

  # === CUSTOM RELATIONSHIPS - New insights not in original schema ===

  # Skill compatibility (connect users with similar skills)
  - name: "skill_compatibility"
    rule_type: "relationship"
    relationship_type: "SKILL_COMPATIBLE"
    direction: "both"
    source:
      type: "query"
      value: "SELECT u1.id as user1_id, u2.id as user2_id, COUNT(DISTINCT us1.skill_id) as common_skills FROM users u1 JOIN user_skills us1 ON u1.id = us1.user_id JOIN user_skills us2 ON us1.skill_id = us2.skill_id JOIN users u2 ON us2.user_id = u2.id WHERE u1.id < u2.id GROUP BY u1.id, u2.id HAVING common_skills >= 2"
    source_node:
      type: "User"
      key: "user1_id"
      target_field: "id"
    target_node:
      type: "User"
      key: "user2_id"
      target_field: "id"
    properties:
      common_skills: "common_skills"

  # Project skill requirements
  - name: "project_skill_requirements"
    rule_type: "relationship"
    relationship_type: "REQUIRES_SKILL"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT ps.project_id, ps.skill_id, ps.importance FROM project_skills ps"
    source_node:
      type: "Project"
      key: "project_id"
      target_field: "id"
    target_node:
      type: "Skill"
      key: "skill_id"
      target_field: "id"
    properties:
      importance: "importance"

  # Task dependencies with types
  - name: "task_dependencies"
    rule_type: "relationship"
    relationship_type: "DEPENDS_ON"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT td.dependent_task_id, td.prerequisite_task_id, td.dependency_type FROM task_dependencies td"
    source_node:
      type: "Task"
      key: "dependent_task_id"
      target_field: "id"
    target_node:
      type: "Task"
      key: "prerequisite_task_id"
      target_field: "id"
    properties:
      dependency_type: "dependency_type"

  # Hierarchical task relationships (parent-child)
  - name: "task_hierarchy"
    rule_type: "relationship"
    relationship_type: "SUBTASK_OF"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT t.id as child_id, t.parent_task_id FROM tasks t WHERE t.parent_task_id IS NOT NULL"
    source_node:
      type: "Task"
      key: "child_id"
      target_field: "id"
    target_node:
      type: "Task"
      key: "parent_task_id"
      target_field: "id"
    field_mappings:
      child_id: "id"

  # === ANALYTICAL RELATIONSHIPS - Connect insights to core entities ===

  # Connect experts to their skills
  - name: "expert_skill_mastery"
    rule_type: "relationship"
    relationship_type: "EXPERT_IN"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT CONCAT('EXPERT_', us.user_id, '_', us.skill_id) as expert_id, us.skill_id FROM user_skills us WHERE us.proficiency IN ('advanced', 'expert') AND us.years_experience >= 4"
    source_node:
      type: "SkillExpert"
      key: "expert_id"
      target_field: "id"
    target_node:
      type: "Skill"
      key: "skill_id"
      target_field: "id"
    field_mappings:
      expert_id: "id"

  # Connect high-impact projects to regular projects
  # Temporarily disabled
  # - name: "high_impact_project_connection"
  #   rule_type: "relationship"
  #   relationship_type: "ENHANCED_VIEW_OF"
  #   direction: "outgoing"
  #   source:
  #     type: "query"
  #     value: "SELECT CONCAT('IMPACT_', p.id) as impact_id, p.id as project_id FROM projects p WHERE p.budget > 150000 OR p.priority IN ('high', 'critical')"
  #   source_node:
  #     type: "HighImpactProject"
  #     key: "impact_id"
  #     target_field: "id"
  #   target_node:
  #     type: "Project"
  #     key: "project_id"
  #     target_field: "id"
  #   field_mappings:
  #     impact_id: "id"

  # Connect team summaries to actual teams
  - name: "team_summary_connection"
    rule_type: "relationship"
    relationship_type: "SUMMARIZES"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT CONCAT('TEAM_SUMMARY_', t.id) as summary_id, t.id as team_id FROM teams t"
    source_node:
      type: "TeamSummary"
      key: "summary_id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_id"
      target_field: "id"
    field_mappings:
      summary_id: "id"
