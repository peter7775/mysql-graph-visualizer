/*
 * SQL Graph Visualizer - Sakila Database Direct Connection Test
 *
 * Copyright (c) 2024
 * Licensed under Dual License: AGPL-3.0 OR Commercial License
 * See LICENSE file for details
 * Patent Pending - Application filed for innovative database transformation techniques
 */

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"

	"sql-graph-visualizer/internal/application/services"
	"sql-graph-visualizer/internal/domain/models"
	"sql-graph-visualizer/internal/infrastructure/persistence/mysql"
)

func main() {
	fmt.Println("🎬 SQL Graph Visualizer - Sakila Database Direct Connection Test")
	fmt.Println("================================================================")

	// Test configuration for connecting to Sakila database
	config := &models.MySQLConfig{
		Host:     "127.0.0.1",
		Port:     3308,
		User:     "sakila_user",
		Username: "sakila_user", // For compatibility
		Password: "sakila123",
		Database: "sakila",
		ConnectionMode: models.ConnectionModeExisting,
		
		// Data filtering configuration
		DataFiltering: models.DataFilteringConfig{
			SchemaDiscovery:  true,
			RowLimitPerTable: 100, // Limit for testing
			TableBlacklist:   []string{"film_text"}, // Skip full-text table
		},
		
		// Security configuration
		Security: models.SecurityConfig{
			ReadOnly:          true,
			ConnectionTimeout: 30,
			QueryTimeout:      60,
			MaxConnections:    3,
		},
		
		// Auto-generated rules configuration
		AutoGeneratedRules: models.AutoGeneratedRulesConfig{
			Enabled: true,
			Strategy: &models.RuleGenerationStrategy{
				TableToNode:            true,
				ForeignKeysToRelations: true,
				NamingConvention: &models.NamingConvention{
					NodeTypeFormat:     "Pascal",
					RelationTypeFormat: "UPPER_SNAKE",
				},
			},
		},
	}

	// Initialize MySQL repository (this would normally be injected)
	mysqlRepo := mysql.NewMySQLRepository(nil) // We'll connect through the service

	// Initialize the Direct Database Service
	fmt.Println("TOOL Initializing Direct Database Service...")
	directDBService := services.NewDirectDatabaseService(mysqlRepo, config)

	// Validate configuration
	fmt.Println("Validating configuration...")
	if err := directDBService.ValidateConfiguration(); err != nil {
		log.Fatalf("Configuration validation failed: %v", err)
	}
	fmt.Println("Configuration is valid")

	// Test 1: Quick Connection Test
	fmt.Println("\nTEST Test 1: Quick Connection Test")
	fmt.Println("================================")
	
	ctx := context.Background()
	testResult, err := directDBService.TestConnection(ctx)
	if err != nil {
		log.Fatalf("Connection test failed: %v", err)
	}
	
	if testResult.Success {
		fmt.Printf("Connection successful!\n")
		fmt.Printf("   Database: %s\n", testResult.DatabaseName)
		fmt.Printf("   Server Version: %s\n", testResult.ServerVersion)
		fmt.Printf("   User: %s\n", testResult.UserName)
		fmt.Printf("   Tables found: %d\n", testResult.TableCount)
	} else {
		fmt.Printf("Connection failed: %s\n", testResult.ErrorMessage)
		return
	}

	// Test 2: Data Size Estimation
	fmt.Println("\n📏 Test 2: Data Size Estimation")
	fmt.Println("===============================")
	
	datasetInfo, err := directDBService.GetDataSizeEstimation(ctx)
	if err != nil {
		log.Printf("Data size estimation failed: %v", err)
	} else {
		fmt.Printf("Dataset Information:\n")
		fmt.Printf("   Total Tables: %d\n", datasetInfo.TotalTables)
		fmt.Printf("   Total Rows: %d\n", datasetInfo.TotalRows)
		fmt.Printf("   Estimated Size: %.2f MB\n", datasetInfo.EstimatedSizeMB)
		
		fmt.Printf("   Top 5 largest tables:\n")
		count := 0
		for tableName, rowCount := range datasetInfo.TableSizes {
			if count >= 5 {
				break
			}
			fmt.Printf("     - %s: %d rows\n", tableName, rowCount)
			count++
		}
	}

	// Test 3: Full Schema Analysis
	fmt.Println("\nANALYZE Test 3: Complete Database Analysis")
	fmt.Println("====================================")
	
	analysisResult, err := directDBService.ConnectAndAnalyze(ctx)
	if err != nil {
		log.Fatalf("Database analysis failed: %v", err)
	}
	
	if !analysisResult.Success {
		fmt.Printf("Analysis failed: %s\n", analysisResult.ErrorMessage)
		return
	}

	// Display results
	fmt.Printf("Analysis completed in %v\n", analysisResult.ProcessingDuration)
	fmt.Printf("\nTARGET Analysis Summary:\n")
	fmt.Printf("   Database: %s@%s:%d/%s\n", 
		analysisResult.DatabaseInfo.User,
		analysisResult.DatabaseInfo.Host, 
		analysisResult.DatabaseInfo.Port,
		analysisResult.DatabaseInfo.Database)
	fmt.Printf("   Server Version: %s\n", analysisResult.DatabaseInfo.Version)
	
	if analysisResult.Summary != nil {
		summary := analysisResult.Summary
		fmt.Printf("   Tables Analyzed: %d\n", summary.TotalTables)
		fmt.Printf("   Generated Rules: %d (%d nodes, %d relationships)\n", 
			summary.TotalRules, summary.NodeRules, summary.RelationshipRules)
		fmt.Printf("   Graph Patterns: %d\n", summary.TotalPatterns)
		fmt.Printf("   Security Level: %s\n", analysisResult.SecurityValidation.SecurityLevel)
		
		if len(summary.Warnings) > 0 {
			fmt.Printf("   WARN Warnings: %d\n", len(summary.Warnings))
			for _, warning := range summary.Warnings {
				fmt.Printf("     - %s\n", warning)
			}
		}
		
		if len(summary.Recommendations) > 0 {
			fmt.Printf("   TIP Recommendations: %d\n", len(summary.Recommendations))
			for _, rec := range summary.Recommendations {
				fmt.Printf("     - %s\n", rec)
			}
		}
	}

	// Show discovered tables with their graph types
	fmt.Printf("\nINFO Discovered Tables:\n")
	if analysisResult.SchemaAnalysis != nil {
		for _, table := range analysisResult.SchemaAnalysis.Tables {
			graphType := "NODE"
			if table.GraphType == "RELATIONSHIP" {
				graphType = "RELATIONSHIP"
			}
			fmt.Printf("   %s (%s) - %d rows, %d columns\n", 
				table.Name, graphType, table.EstimatedRows, len(table.Columns))
		}
	}

	// Show identified graph patterns
	if analysisResult.SchemaAnalysis != nil && len(analysisResult.SchemaAnalysis.GraphPatterns) > 0 {
		fmt.Printf("\n🕸️ Identified Graph Patterns:\n")
		for _, pattern := range analysisResult.SchemaAnalysis.GraphPatterns {
			fmt.Printf("   %s: %s (confidence: %.1f%%)\n", 
				pattern.PatternType, pattern.Description, pattern.Confidence*100)
		}
	}

	// Show some generated transformation rules
	if analysisResult.SchemaAnalysis != nil && len(analysisResult.SchemaAnalysis.GeneratedRules) > 0 {
		fmt.Printf("\nRUN Sample Generated Transformation Rules:\n")
		count := 0
		for _, rule := range analysisResult.SchemaAnalysis.GeneratedRules {
			if count >= 5 { // Show only first 5 rules
				break
			}
			fmt.Printf("   %s (%s):\n", rule.RuleID, rule.RuleType)
			fmt.Printf("     %s\n", rule.Description)
			if rule.AutoGenerated {
				fmt.Printf("     Confidence: %.1f%% (auto-generated)\n", rule.Confidence*100)
			}
			fmt.Printf("     Cypher: %s\n", rule.CypherQuery)
			fmt.Println()
			count++
		}
		
		if len(analysisResult.SchemaAnalysis.GeneratedRules) > 5 {
			fmt.Printf("   ... and %d more rules\n", len(analysisResult.SchemaAnalysis.GeneratedRules)-5)
		}
	}

	// Optional: Save full analysis to JSON file
	fmt.Printf("\n💾 Saving full analysis to sakila_analysis.json...\n")
	if jsonData, err := json.MarshalIndent(analysisResult, "", "  "); err == nil {
		// Note: In a real implementation, you'd save this to a file
		fmt.Printf("Analysis data serialized successfully (%d bytes)\n", len(jsonData))
	}

	fmt.Println("\nDONE Sakila Database Analysis Complete!")
	fmt.Println("=====================================")
	fmt.Printf("The Direct Database Connection functionality is working correctly!\n")
	fmt.Printf("Connected to existing MySQL database\n")
	fmt.Printf("Performed comprehensive schema analysis\n") 
	fmt.Printf("Generated %d Neo4j transformation rules\n", len(analysisResult.SchemaAnalysis.GeneratedRules))
	fmt.Printf("Identified %d graph patterns\n", len(analysisResult.SchemaAnalysis.GraphPatterns))
	fmt.Printf("Validated security and permissions\n")
}
