# golangci-lint configuration for mysql-graph-visualizer

run:
  timeout: 10m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor
    - testdata
    - examples
    - scripts
  skip-files:
    - ".*_test.go"
    - "mock_*.go"
    - ".*mock.go"

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  path-prefix: ""

linters-settings:
  # Cyclomatic complexity
  cyclop:
    max-complexity: 15
    package-average: 10.0

  # Duplicate code detection
  dupl:
    threshold: 100

  # Function length
  funlen:
    lines: 80
    statements: 50

  # Cognitive complexity
  gocognit:
    min-complexity: 20

  # Code complexity
  gocyclo:
    min-complexity: 15

  # Documentation
  godot:
    scope: declarations
    exclude:
      - "check interfaces"
    capital: false

  # Imports formatting
  goimports:
    local-prefixes: mysql-graph-visualizer

  # Line length
  lll:
    line-length: 120

  # Misspellings
  misspell:
    locale: US
    ignore-words:
      - "colour"
      - "flavour"

  # Nil checks
  nilnil:
    checked-types:
      - ptr
      - func
      - iface
      - map
      - chan

  # Naming conventions
  revive:
    min-confidence: 0.8
    rules:
      - name: var-naming
        severity: warning
        disabled: false
        arguments:
          - ["ID"] # allow ID instead of Id
      - name: exported
        severity: warning
        disabled: false
        arguments:
          - "checkPrivateReceivers"
          - "sayRepetitiveInsteadOfStutters"

  # Unused code
  unused:
    check-exported: false

  # Whitespace issues
  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-cuddle-declarations: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: false
    allow-separated-leading-comment: false

  # Error handling
  errorlint:
    errorf: true
    asserts: true
    comparison: true

  # Security
  gosec:
    excludes:
      - G104 # Allow unhandled errors in specific cases
    config:
      global:
        nosec: false
        "#nosec": ""
        show-ignored: false
        audit: enabled

linters:
  # Enable specific linters
  enable:
    - asciicheck      # Check for non-ASCII characters
    - bidichk         # Check for dangerous unicode bidirectional characters
    - bodyclose       # Check HTTP response body is closed
    - containedctx    # Check for contained context.Context
    - contextcheck    # Check context.Context usage
    - cyclop          # Check cyclomatic complexity
    - decorder        # Check declaration order and count
    - dupl            # Check for code duplication
    - durationcheck   # Check for two durations multiplied together
    - errcheck        # Check for unchecked errors
    - errchkjson      # Check for JSON marshaling/unmarshaling errors
    - errname         # Check error naming conventions
    - errorlint       # Check error handling
    - exhaustive      # Check enum switch statements
    - exportloopref   # Check for loop variable capture
    - forbidigo       # Forbid specific identifiers
    - funlen          # Check function length
    - gci             # Control package import order
    - gochecknoglobals # Check for global variables
    - gochecknoinits  # Check for init functions
    - gocognit        # Check cognitive complexity
    - goconst         # Check for repeated strings that could be constants
    - gocritic        # Provide various checks
    - gocyclo         # Check cyclomatic complexity
    - godot           # Check comments end with period
    - gofmt           # Check whether code was gofmt-ed
    - gofumpt         # Check whether code was gofumpt-ed
    - goheader        # Check file headers
    - goimports       # Check imports formatting
    - gomnd           # Check magic numbers
    - gomoddirectives # Check go.mod directives
    - gomodguard      # Check dependencies
    - goprintffuncname # Check printf-like functions naming
    - gosec           # Check for security issues
    - gosimple        # Suggest code simplifications
    - govet           # Examine Go source code and report issues
    - grouper         # Check import grouping
    - importas        # Check import aliases
    - ineffassign     # Detect ineffectual assignments
    - interfacebloat  # Check for large interfaces
    - ireturn         # Check interface returns
    - lll             # Check line length
    - maintidx        # Check maintainability index
    - makezero        # Check for incorrect make usage
    - misspell        # Check for misspellings
    - nakedret        # Check for naked returns
    - nestif          # Check for nested if statements
    - nilerr          # Check for incorrect nil error return
    - nilnil          # Check for nil returns without error
    - noctx           # Check for HTTP requests without context
    - nolintlint      # Check //nolint directives
    - nonamedreturns  # Check for named returns
    - nosprintfhostport # Check for sprintf with host:port
    - predeclared     # Check for predeclared identifiers
    - promlinter      # Check Prometheus metrics naming
    - reassign        # Check for reassigning variables
    - revive          # Replacement for golint
    - staticcheck     # Static analysis checks
    - stylecheck      # Style checks
    - tenv            # Check for os.Setenv usage in tests
    - thelper         # Check test helpers
    - tparallel       # Check for missing t.Parallel()
    - typecheck       # Parse and type-check Go code
    - unconvert       # Remove unnecessary type conversions
    - unparam         # Check for unused function parameters
    - unused          # Check for unused constants, variables, functions
    - usestdlibvars   # Check for use of stdlib variables
    - wastedassign    # Check for wasted assignments
    - whitespace      # Check for leading and trailing whitespace
    - wrapcheck       # Check error wrapping
    - wsl             # Whitespace Linter

  # Disable specific linters that might be too strict for this project
  disable:
    - exhaustivestruct # Too strict for struct initialization
    - exhaustruct      # Too strict for struct usage
    - forcetypeassert  # Type assertions are sometimes necessary
    - gochecknoglobals # Some globals are acceptable
    - gochecknoinits   # Init functions are sometimes necessary
    - godox            # TODO comments are acceptable
    - goerr113         # Error wrapping rules are sometimes too strict
    - golint           # Deprecated, replaced by revive
    - gomnd            # Magic numbers are sometimes acceptable
    - ifshort          # Short if statements are not always better
    - interfacer       # Deprecated
    - maligned         # Deprecated, replaced by fieldalignment
    - nlreturn         # Newlines before returns are not always necessary
    - nosnakecase      # Snake case is sometimes acceptable
    - paralleltest     # Parallel tests are not always applicable
    - scopelint        # Deprecated
    - sqlclosecheck    # SQL close checks might be too strict
    - structcheck      # Deprecated, functionality is in unused
    - testpackage      # Test packages in same package are sometimes preferred
    - varcheck         # Deprecated, functionality is in unused
    - varnamelen       # Variable name length rules might be too strict
    - wrapcheck        # Error wrapping might be too strict for this project

issues:
  # Maximum issues count per one linter
  max-issues-per-linter: 0

  # Maximum count of issues with the same text
  max-same-issues: 0

  # Show only new issues
  new: false

  # Fix issues automatically when possible
  fix: false

  # Exclude specific issues
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gomnd
        - goconst
        - funlen
        - dupl
        - gosec
        - lll

    # Exclude some linters from running on mock files
    - path: mock_.*\.go
      linters:
        - gomnd
        - goconst
        - funlen
        - dupl
        - unused
        - deadcode

    # Exclude some linters from main.go (entry point)
    - path: cmd/main\.go
      linters:
        - gochecknoinits
        - gochecknoglobals

    # Allow magic numbers in configuration files
    - path: internal/config/
      linters:
        - gomnd

    # Allow long lines in generated code
    - path: .*\.pb\.go
      linters:
        - lll
        - gosec

    # Allow complexity in domain aggregates
    - path: internal/domain/aggregates/
      linters:
        - gocyclo
        - cyclop
        - gocognit

  # Exclude specific patterns
  exclude:
    # Default excludes
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    - "func name will be used as test\\.Test.* by other packages, and that stutters; consider calling this"
    - "G104: Errors unhandled"

  # Show issues even if code is not changed
  exclude-use-default: false

  # Include test files in issues output
  include:
    - EXC0012 # Disable default exclusions for error checks
    - EXC0014 # Comment on exported types

severity:
  # Default severity for issues
  default-severity: error

  # Severity rules
  rules:
    - linters:
        - dupl
      severity: info
    - linters:
        - goconst
      severity: info
    - linters:
        - gomnd
      severity: info
