/*
 * Copyright (c) 2025 Petr Miroslav Stepanek <petrstepanek99@gmail.com>
 *
 * This source code is licensed under a Dual License:
 * - AGPL-3.0 for open source use (see LICENSE file)
 * - Commercial License for business use (contact: petrstepanek99@gmail.com)
 *
 * This software contains patent-pending innovations in database analysis
 * and graph visualization. Commercial use requires separate licensing.
 */


package models

// TransformationConfig represents a single transformation rule configuration.
type TransformationConfig struct {
	Name          string            `yaml:"name"`
	Source        SourceConfig      `yaml:"source"`
	Nodes         []NodeConfig      `yaml:"nodes"`
	Relations     []RelationConfig  `yaml:"relations"`
	FieldMappings map[string]string `yaml:"field_mappings"`
	SourceNode    RelationNode      `yaml:"source_node"`
	TargetNode    RelationNode      `yaml:"target_node"`
	RelationType  string            `yaml:"relationship_type,omitempty"`
	TargetType    string            `yaml:"target_type,omitempty"`
	RuleType      string            `yaml:"rule_type,omitempty"`
	Direction     string            `yaml:"direction,omitempty"`
	Properties    map[string]string `yaml:"properties,omitempty"`
	Priority      int               `yaml:"priority,omitempty"`
}

// NodeConfig represents node configuration for transformation rules.
type NodeConfig struct {
	Label      string            `yaml:"label"`
	Properties []PropertyMapping `yaml:"properties"`
}

// PropertyMapping represents mapping between source and target properties.
type PropertyMapping struct {
	Source string `yaml:"source"`
	Target string `yaml:"target"`
}

// RelationConfig represents relationship configuration between nodes.
type RelationConfig struct {
	Type string       `yaml:"type"`
	From RelationNode `yaml:"from"`
	To   RelationNode `yaml:"to"`
}

// RelationNode represents a node in a relationship configuration.
type RelationNode struct {
	Type        string `yaml:"type"`
	Key         string `yaml:"key"`
	TargetField string `yaml:"target_field"`
}

// SourceConfig represents data source configuration for transformations.
type SourceConfig struct {
	Type        string `yaml:"type"`
	Value       string `yaml:"value"`
	SourceTable string `yaml:"source_table"`
}

// ConnectionMode represents different database connection modes
type ConnectionMode string

const (
	ConnectionModeExisting ConnectionMode = "existing"
	ConnectionModeTestData ConnectionMode = "test_data"
	ConnectionModeSQLFile  ConnectionMode = "sql_file"
)

// DataFilteringConfig represents options for filtering and limiting data
type DataFilteringConfig struct {
	SchemaDiscovery   bool              `yaml:"schema_discovery"`
	TableWhitelist    []string          `yaml:"table_whitelist,omitempty"`
	TableBlacklist    []string          `yaml:"table_blacklist,omitempty"`
	RowLimitPerTable  int               `yaml:"row_limit_per_table,omitempty"`
	WhereConditions   map[string]string `yaml:"where_conditions,omitempty"`
	QueryTimeout      int               `yaml:"query_timeout,omitempty"` // seconds
}

// SecurityConfig represents security settings for database connections
type SecurityConfig struct {
	ReadOnly                   bool     `yaml:"read_only"`
	ConnectionTimeout          int      `yaml:"connection_timeout"` // seconds
	QueryTimeout               int      `yaml:"query_timeout"`      // seconds
	MaxConnections             int      `yaml:"max_connections"`
	AllowProductionConnections bool     `yaml:"allow_production_connections,omitempty"`
	AllowRootUser              bool     `yaml:"allow_root_user,omitempty"`
	AllowedHosts               []string `yaml:"allowed_hosts,omitempty"`
	ForbiddenPatterns          []string `yaml:"forbidden_patterns,omitempty"`
}

// SSLConfig represents SSL/TLS configuration for database connections
type SSLConfig struct {
	Enabled              bool   `yaml:"enabled"`
	CertFile             string `yaml:"cert_file,omitempty"`
	KeyFile              string `yaml:"key_file,omitempty"`
	CAFile               string `yaml:"ca_file,omitempty"`
	InsecureSkipVerify   bool   `yaml:"insecure_skip_verify,omitempty"`
}

// MySQLConfig represents MySQL database connection configuration.
type MySQLConfig struct {
	Host                string                     `yaml:"host"`
	Port                int                        `yaml:"port"`
	User                string                     `yaml:"user"`
	Username            string                     `yaml:"username,omitempty"` // alias for User
	Password            string                     `yaml:"password"`
	Database            string                     `yaml:"database"`
	ConnectionMode      ConnectionMode             `yaml:"connection_mode,omitempty"`
	DataFiltering       DataFilteringConfig        `yaml:"data_filtering,omitempty"`
	Security            SecurityConfig             `yaml:"security,omitempty"`
	SSLConfig           SSLConfig                  `yaml:"ssl,omitempty"`
	AutoGeneratedRules  AutoGeneratedRulesConfig   `yaml:"auto_generated_rules,omitempty"`
}

// BatchProcessingConfig represents settings for working with large datasets
type BatchProcessingConfig struct {
	BatchSize       int `yaml:"batch_size"`
	CommitFrequency int `yaml:"commit_frequency"`
	MemoryLimitMB   int `yaml:"memory_limit_mb"`
}

// Neo4jConfig represents Neo4j database connection configuration.
type Neo4jConfig struct {
	URI              string                  `yaml:"uri"`
	User             string                  `yaml:"user"`
	Password         string                  `yaml:"password"`
	BatchProcessing  *BatchProcessingConfig  `yaml:"batch_processing,omitempty"`
}

// NamingConvention represents naming convention settings for automatic rule generation
type NamingConvention struct {
	NodeTypeFormat     string `yaml:"node_type_format"`     // "Pascal", "snake_case", etc.
	RelationTypeFormat string `yaml:"relation_type_format"` // "UPPER_SNAKE", "PascalCase", etc.
}

// RuleGenerationStrategy represents strategy for creating automatic transformation rules
type RuleGenerationStrategy struct {
	TableToNode           bool               `yaml:"table_to_node"`
	ForeignKeysToRelations bool              `yaml:"foreign_keys_to_relations"`
	NamingConvention      *NamingConvention  `yaml:"naming_convention,omitempty"`
}

// TableOverride represents override settings for specific tables in rule generation
type TableOverride struct {
	MergeWith        string `yaml:"merge_with,omitempty"`
	RelationshipType string `yaml:"relationship_type,omitempty"`
	Skip             bool   `yaml:"skip,omitempty"`
}

// AutoGeneratedRulesConfig represents configuration for automatic rule generation
type AutoGeneratedRulesConfig struct {
	Enabled        bool                           `yaml:"enabled"`
	Strategy       *RuleGenerationStrategy        `yaml:"strategy,omitempty"`
	TableOverrides map[string]*TableOverride     `yaml:"table_overrides,omitempty"`
}

// SchemaAnalysisConfig represents configuration for schema analysis
type SchemaAnalysisConfig struct {
	GenerateRules          bool               `yaml:"generate_rules"`
	TableToNode            bool               `yaml:"table_to_node"`
	ForeignKeysToRelations bool               `yaml:"foreign_keys_to_relations"`
	NamingConvention       *NamingConvention  `yaml:"naming_convention,omitempty"`
}

// Config represents the main application configuration.
type Config struct {
	MySQL              MySQLConfig                `yaml:"mysql"`
	Neo4j              Neo4jConfig                `yaml:"neo4j"`
	TransformRules     []TransformationConfig     `yaml:"transform_rules"`
	AutoGeneratedRules *AutoGeneratedRulesConfig  `yaml:"auto_generated_rules,omitempty"`
}
